================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-07-30T10:29:48.319Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
client/
  public/
    favicon.svg
  src/
    assets/
      images/
        landing.jpg
        logo.png
        not-found.jpg
    components/
      ActionButtons.jsx
      DiaryHeader.jsx
      DiaryList.jsx
      DiaryStats.jsx
      FormField.jsx
      FormRow.jsx
      index.js
      Logo.jsx
      LogoutContainer.jsx
      Navbar.jsx
      ProfitLossChart.jsx
      SubmitBtn.jsx
      TableHeader.jsx
      TradeForm.jsx
      TradeRow.jsx
      TradeTable.jsx
    context/
      DiaryContext.jsx
    pages/
      CreateDiaryPage.jsx
      DashboardLayout.jsx
      DiaryDetailPage.jsx
      Error.jsx
      HomeLayout.jsx
      index.js
      Landing.jsx
      Login.jsx
      Register.jsx
    utils/
      authUtils.js
      customFetch.js
    App.jsx
    index.css
    main.jsx
  .eslintrc.cjs
  index.html
  package.json
  postcss.config.js
  tailwind.config.js
  vite.config.js
controllers/
  authController.js
  diaryContorller.js
  tradeController.js
  userController.js
errors/
  customErrors.js
middleware/
  auth.js
  errorHandler.js
models/
  Diary.js
  Trade.js
  User.js
routes/
  authRouter.js
  diaryRouter.js
  tradeRouter.js
  userRouter.js
utils/
  password.js
  token.js
validation/
  authValidation.js
  commonValidations.js
  diaryValidation.js
  withValidationErrors.js
package.json
server.js

================================================================
Repository Files
================================================================

================
File: client/.eslintrc.cjs
================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react/jsx-runtime",
    "plugin:react-hooks/recommended",
  ],
  ignorePatterns: ["dist", ".eslintrc.cjs"],
  parserOptions: { ecmaVersion: "latest", sourceType: "module" },
  settings: { react: { version: "18.2" } },
  plugins: ["react-refresh"],
  rules: {
    "react/prop-types": "off",
    "react/jsx-no-target-blank": "off",
    "react-refresh/only-export-components": [
      "warn",
      { allowConstantExport: true },
    ],
  },
};

================
File: client/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TradeDiary</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: client/package.json
================
{
  "name": "client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.7.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.2.1",
    "react-router-dom": "^6.25.1",
    "react-toastify": "^10.0.5",
    "recharts": "^2.12.7"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.3",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "postcss": "^8.4.40",
    "tailwindcss": "^3.4.7",
    "vite": "^5.3.4"
  }
}

================
File: client/postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: client/public/favicon.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
  <rect width="100" height="100" rx="20" fill="#4f46e5"/>
  <path d="M30 25 L30 75 L50 75 L50 55 L70 75 L70 25 L50 25 L50 45 Z" fill="white"/>
</svg>

================
File: client/src/App.jsx
================
import { createBrowserRouter, RouterProvider } from "react-router-dom";

import { DiaryProvider } from "./context/DiaryContext";

import {
  Landing,
  Error,
  Login,
  Register,
  DashboardLayout,
  DiaryDetailPage,
  CreateDiaryPage,
} from "./pages";

import { action as registerAction } from "./pages/Register";
import { action as loginAction } from "./pages/Login";
import { loader as dashboardLoader } from "./pages/DashboardLayout";
import { loader as diaryDetailLoader } from "./pages/DiaryDetailPage";

import { authCheckLoader } from "./utils/authUtils";

const router = createBrowserRouter([
  {
    path: "/",
    element: <Landing />,
  },
  {
    path: "/login",
    element: <Login />,
    loader: authCheckLoader,
    action: loginAction,
  },
  {
    path: "/register",
    element: <Register />,
    loader: authCheckLoader,
    action: registerAction,
  },
  {
    path: "/dashboard",
    element: <DashboardLayout />,
    loader: dashboardLoader,
    children: [
      {
        path: "diary/:id",
        element: <DiaryDetailPage />,
        loader: diaryDetailLoader,
      },
      {
        path: "create-diary",
        element: <CreateDiaryPage />,
      },
    ],
  },
  {
    path: "*",
    element: <Error />,
  },
]);

function App() {
  return (
    <DiaryProvider>
      <RouterProvider router={router} />
    </DiaryProvider>
  );
}

export default App;

================
File: client/src/components/ActionButtons.jsx
================
const ActionButtons = ({ onEdit, onDelete }) => (
  <div>
    <button
      onClick={onEdit}
      className="bg-blue-500 text-white px-2 py-1 rounded mr-2"
    >
      Edit
    </button>
    <button
      onClick={onDelete}
      className="bg-red-500 text-white px-2 py-1 rounded"
    >
      Delete
    </button>
  </div>
);

export default ActionButtons;

================
File: client/src/components/DiaryHeader.jsx
================
const DiaryHeader = ({ name, description }) => {
  return (
    <div className="mb-6 flex flex-col items-center justify-center text-center">
      <h1 className="text-3xl font-bold mb-2">{name}</h1>
      <p className="text-gray-600 max-w-2xl">{description}</p>
    </div>
  );
};

export default DiaryHeader;

================
File: client/src/components/DiaryList.jsx
================
import React from "react";
import { Link, useNavigate } from "react-router-dom";
import { useDashboardContext } from "../pages/DashboardLayout";

const DiaryList = () => {
  const { diaries, deleteDiary } = useDashboardContext();
  const navigate = useNavigate();

  const handleDelete = async (id) => {
    if (window.confirm("Are you sure you want to delete this diary?")) {
      await deleteDiary(id);
      navigate("/dashboard"); // Navigate to dashboard after deletion
    }
  };

  return (
    <div className="mt-8">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {diaries.map((diary) => (
          <div key={diary._id} className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-xl font-semibold text-gray-800">
              {diary.name}
            </h2>
            <p className="text-gray-600 mt-2">
              Created: {new Date(diary.createdAt).toLocaleDateString()}
            </p>
            <p className="text-gray-600">Trades: {diary.trades.length}</p>
            <div className="mt-4 flex justify-between">
              <Link
                to={`/dashboard/diary/${diary._id}`}
                className="text-indigo-600 hover:text-indigo-800 font-medium"
              >
                View Diary
              </Link>
              <button
                onClick={() => handleDelete(diary._id)}
                className="text-red-600 hover:text-red-800 font-medium"
              >
                Delete
              </button>
            </div>
          </div>
        ))}
      </div>
      <div className="mt-8">
        <Link
          to="/dashboard/create-diary"
          className="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition duration-300"
        >
          Create New Diary
        </Link>
      </div>
    </div>
  );
};

export default DiaryList;

================
File: client/src/components/DiaryStats.jsx
================
const DiaryStats = ({ totalTrades, totalProfitLoss, winRate }) => {
  const formatNumber = (value) => {
    return value != null ? Number(value).toFixed(2) : "N/A";
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
      <div className="border p-4 rounded">
        <h2 className="font-bold">Total Trades</h2>
        <p className="text-2xl font-semibold">{totalTrades}</p>
      </div>
      <div className="border p-4 rounded">
        <h2 className="font-bold">Total Profit/Loss</h2>
        <p
          className={`text-2xl font-semibold ${
            totalProfitLoss >= 0 ? "text-green-600" : "text-red-600"
          }`}
        >
          ${formatNumber(totalProfitLoss)}
        </p>
      </div>
      <div className="border p-4 rounded">
        <h2 className="font-bold">Win Rate</h2>
        <p className="text-2xl font-semibold">{winRate}%</p>
      </div>
    </div>
  );
};

export default DiaryStats;

================
File: client/src/components/FormField.jsx
================
import React from "react";

const FormField = ({
  label,
  id,
  name,
  value,
  onChange,
  type = "text",
  options = [],
  required = false,
  step = "1",
}) => (
  <div className="col-span-2 sm:col-span-1">
    <label htmlFor={id} className="block text-sm font-medium text-gray-700">
      {label}
    </label>
    {type === "select" ? (
      <select
        id={id}
        name={name}
        value={value}
        onChange={onChange}
        className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
        required={required}
      >
        {options.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>
    ) : type === "textarea" ? (
      <textarea
        id={id}
        name={name}
        value={value}
        onChange={onChange}
        rows="3"
        className="mt-1 block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
      ></textarea>
    ) : (
      <input
        id={id}
        name={name}
        type={type}
        value={value}
        onChange={onChange}
        className="mt-1 block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
        required={required}
        step={step}
      />
    )}
  </div>
);

export default FormField;

================
File: client/src/components/FormRow.jsx
================
const FormRow = ({ type, name, labelText, defaultValue, onChange }) => {
  return (
    <div className="mb-4">
      <label
        htmlFor={name}
        className="block text-sm font-medium text-gray-700 mb-1"
      >
        {labelText || name.charAt(0).toUpperCase() + name.slice(1)}
      </label>
      <input
        type={type}
        id={name}
        name={name}
        className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
        defaultValue={defaultValue || ""}
        onChange={onChange}
        required
      />
    </div>
  );
};

export default FormRow;

================
File: client/src/components/Logo.jsx
================
const Logo = () => {
  return (
    <div className="flex items-center justify-center">
      <svg
        className="w-12 h-12 text-indigo-600"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
        />
      </svg>
      <span className="ml-2 text-2xl font-bold text-gray-800">TradeDiary</span>
    </div>
  );
};

export default Logo;

================
File: client/src/components/LogoutContainer.jsx
================
import { useState } from "react";
import { FaCaretDown } from "react-icons/fa";
import { useDashboardContext } from "../pages/DashboardLayout";

const LogoutContainer = () => {
  const [showLogout, setShowLogout] = useState(false);
  const { user, logout } = useDashboardContext();

  return (
    <div className="relative">
      <button
        type="button"
        className="flex items-center space-x-2 bg-white border border-gray-300 rounded-md px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        onClick={() => setShowLogout(!showLogout)}
      >
        <span>{user?.user.username}</span>
        <FaCaretDown className="text-gray-400" />
      </button>
      {showLogout && (
        <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5">
          <div
            className="py-1"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="options-menu"
          >
            <button
              type="button"
              className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
              role="menuitem"
              onClick={logout}
            >
              Logout
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default LogoutContainer;

================
File: client/src/components/Navbar.jsx
================
import { Link } from "react-router-dom";
import Logo from "./Logo";
import LogoutContainer from "./LogoutContainer";

const Navbar = () => (
  <nav className="bg-white shadow-md">
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div className="flex justify-between items-center h-16">
        <div className="flex items-center">
          <Link
            to="/dashboard"
            className="flex-shrink-0 flex items-center ml-4"
          >
            <Logo />
          </Link>
        </div>
        <div className="flex items-center space-x-4">
          <LogoutContainer />
        </div>
      </div>
    </div>
  </nav>
);

export default Navbar;

================
File: client/src/components/ProfitLossChart.jsx
================
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
} from "recharts";

const ProfitLossChart = ({ data }) => {
  return (
    <div className="mb-8">
      <h2 className="text-2xl font-semibold mb-4">Profit/Loss Chart</h2>
      <ResponsiveContainer width="100%" height={300}>
        <BarChart data={data}>
          <XAxis dataKey="date" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="profitLoss" fill="#8884d8" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

export default ProfitLossChart;

================
File: client/src/components/SubmitBtn.jsx
================
import { useNavigation } from "react-router-dom";

const SubmitBtn = ({ formBtn }) => {
  const navigation = useNavigation();
  const isSubmitting = navigation.state === "submitting";

  return (
    <button
      type="submit"
      className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out
        ${isSubmitting ? "opacity-75 cursor-not-allowed" : ""}
        ${formBtn ? "mt-6" : ""}`}
      disabled={isSubmitting}
    >
      {isSubmitting ? (
        <>
          <svg
            className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          Submitting...
        </>
      ) : (
        "Submit"
      )}
    </button>
  );
};

export default SubmitBtn;

================
File: client/src/components/TableHeader.jsx
================
const TableHeader = () => (
  <thead>
    <tr className="bg-gray-200">
      {[
        "Symbol",
        "Type",
        "Entry Date",
        "Entry Price",
        "Quantity",
        "Exit Date",
        "Exit Price",
        "Stop Loss",
        "Take Profit",
        "Fees",
        "Profit/Loss",
        "Notes",
        "Actions",
      ].map((header) => (
        <th key={header} className="border p-2">
          {header}
        </th>
      ))}
    </tr>
  </thead>
);

export default TableHeader;

================
File: client/src/components/TradeForm.jsx
================
import React from "react";
import FormField from "./FormField";

const TradeForm = ({ trade, onSubmit, onChange, isEditing }) => {
  const tradeTypeOptions = [
    { value: "long", label: "Long" },
    { value: "short", label: "Short" },
  ];

  return (
    <form onSubmit={onSubmit} className="mt-4 space-y-4">
      <div className="grid grid-cols-2 gap-4">
        {[
          {
            label: "Trade Type",
            id: "tradeType",
            type: "select",
            options: tradeTypeOptions,
          },
          { label: "Symbol", id: "symbol", required: true },
          {
            label: "Entry Date",
            id: "entryDate",
            type: "date",
            required: true,
          },
          {
            label: "Entry Price",
            id: "entryPrice",
            type: "number",
            required: true,
            step: "0.01",
          },
          { label: "Quantity", id: "quantity", type: "number", required: true },
          { label: "Exit Date", id: "exitDate", type: "date" },
          {
            label: "Exit Price",
            id: "exitPrice",
            type: "number",
            step: "0.01",
          },
          {
            label: "Stop Loss",
            id: "stopLoss",
            type: "number",
            required: true,
            step: "0.01",
          },
          {
            label: "Take Profit",
            id: "takeProfit",
            type: "number",
            required: true,
            step: "0.01",
          },
          {
            label: "Fees",
            id: "fees",
            type: "number",
            required: true,
            step: "0.01",
          },
        ].map((field) => (
          <FormField
            key={field.id}
            label={field.label}
            id={field.id}
            name={field.id}
            value={trade[field.id]}
            onChange={onChange}
            type={field.type}
            options={field.options}
            required={field.required}
            step={field.step}
          />
        ))}
      </div>
      <FormField
        label="Notes"
        id="notes"
        name="notes"
        value={trade.notes}
        onChange={onChange}
        type="textarea"
      />
      <button
        type="submit"
        className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
      >
        {isEditing ? "Update Trade" : "Add Trade"}
      </button>
    </form>
  );
};

export default TradeForm;

================
File: client/src/components/TradeRow.jsx
================
import React, { useState } from "react";
import ActionButtons from "./ActionButtons";

const TradeRow = ({ trade, onEditTrade, onDeleteTrade }) => {
  const [showNotes, setShowNotes] = useState(false);

  const formatNumber = (value) =>
    value != null ? Number(value).toFixed(2) : "N/A";
  const formatDate = (date) =>
    date ? new Date(date).toLocaleDateString() : "N/A";

  return (
    <>
      <tr className="hover:bg-gray-100">
        {[
          "symbol",
          "tradeType",
          "entryDate",
          "entryPrice",
          "quantity",
          "exitDate",
          "exitPrice",
          "stopLoss",
          "takeProfit",
          "fees",
          "profitLoss",
        ].map((field, index) => (
          <td key={index} className="border p-2">
            {field === "entryPrice" ||
            field === "exitPrice" ||
            field === "stopLoss" ||
            field === "takeProfit" ||
            field === "fees" ||
            field === "profitLoss"
              ? `$${formatNumber(trade[field])}`
              : field === "entryDate" || field === "exitDate"
              ? formatDate(trade[field])
              : trade[field] || "N/A"}
          </td>
        ))}
        <td className="border p-2">
          <button
            onClick={() => setShowNotes(!showNotes)}
            className="text-blue-500 underline"
          >
            {showNotes ? "Hide Notes" : "Show Notes"}
          </button>
        </td>
        <td className="border p-2">
          <ActionButtons
            onEdit={() => onEditTrade(trade)}
            onDelete={() => onDeleteTrade(trade._id)}
          />
        </td>
      </tr>
      {showNotes && (
        <tr>
          <td colSpan="13" className="border p-2 bg-gray-50">
            <strong>Notes:</strong> {trade.notes || "No notes available"}
          </td>
        </tr>
      )}
    </>
  );
};

export default TradeRow;

================
File: client/src/components/TradeTable.jsx
================
import TableHeader from "./TableHeader";
import TradeRow from "./TradeRow";

const TradeTable = ({ trades, onEditTrade, onDeleteTrade }) => (
  <div className="mb-8">
    <h2 className="text-2xl font-semibold mb-4">Recent Trades</h2>
    <table className="w-full border-collapse border">
      <TableHeader />
      <tbody>
        {trades.map((trade) => (
          <TradeRow
            key={trade._id}
            trade={trade}
            onEditTrade={onEditTrade}
            onDeleteTrade={onDeleteTrade}
          />
        ))}
      </tbody>
    </table>
  </div>
);

export default TradeTable;

================
File: client/src/components/index.js
================
export { default as Logo } from "./Logo";
export { default as FormRow } from "./FormRow";
export { default as DiaryList } from "./DiaryList";
export { default as SubmitBtn } from "./SubmitBtn";
export { default as Navbar } from "./Navbar";
export { default as LogoutContainer } from "./LogoutContainer";
export { default as DiaryHeader } from "./DiaryHeader";
export { default as DiaryStats } from "./DiaryStats";
export { default as ProfitLossChart } from "./ProfitLossChart";
export { default as TradeForm } from "./TradeForm";
export { default as TradeTable } from "./TradeTable";

================
File: client/src/context/DiaryContext.jsx
================
import { createContext, useState, useContext, useCallback } from "react";
import axios from "axios";

const DiaryContext = createContext();

export const DiaryProvider = ({ children }) => {
  const [diaries, setDiaries] = useState([]);

  const fetchDiaries = useCallback(async () => {
    try {
      const response = await axios.get("/api/v1/diaries");
      setDiaries(response.data.diaries);
    } catch (error) {
      console.error("Error fetching diaries:", error);
    }
  }, []);

  const addDiary = useCallback((newDiary) => {
    setDiaries((prevDiaries) => [...prevDiaries, newDiary]);
  }, []);

  const deleteDiary = useCallback(async (diaryId) => {
    try {
      await axios.delete(`/api/v1/diaries/${diaryId}`);
      setDiaries((prevDiaries) =>
        prevDiaries.filter((diary) => diary._id !== diaryId)
      );
    } catch (error) {
      console.error("Error deleting diary:", error);
    }
  }, []);

  return (
    <DiaryContext.Provider
      value={{ diaries, fetchDiaries, addDiary, deleteDiary }}
    >
      {children}
    </DiaryContext.Provider>
  );
};

export const useDiaryContext = () => useContext(DiaryContext);

================
File: client/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: client/src/main.jsx
================
import React from "react";
import ReactDOM from "react-dom/client";
import "react-toastify/dist/ReactToastify.css";
import { ToastContainer } from "react-toastify";

import "./index.css";
import App from "./App.jsx";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
    <ToastContainer position="top-center" autoClose={1500} />
  </React.StrictMode>
);

================
File: client/src/pages/CreateDiaryPage.jsx
================
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { useDashboardContext } from "./DashboardLayout";

const CreateDiaryPage = () => {
  const [diaryData, setDiaryData] = useState({ name: "", description: "" });
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const { addDiary } = useDashboardContext();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setDiaryData((prevData) => ({ ...prevData, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post("/api/v1/diaries", diaryData);
      addDiary(response.data.diary);
      navigate(`/dashboard/diary/${response.data.diary._id}`);
    } catch (err) {
      setError(
        err.response?.data?.msg || "An error occurred while creating the diary"
      );
    }
  };

  return (
    <div className="max-w-2xl mx-auto mt-10 p-6 bg-white rounded-lg shadow-md">
      <h1 className="text-3xl font-bold mb-6 text-center">Create New Diary</h1>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Diary Name
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={diaryData.name}
            onChange={handleChange}
            required
            className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Description
          </label>
          <textarea
            id="description"
            name="description"
            value={diaryData.description}
            onChange={handleChange}
            rows="4"
            className="appearance-none rounded-md relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
          ></textarea>
        </div>
        <div>
          <button
            type="submit"
            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Create Diary
          </button>
        </div>
      </form>
    </div>
  );
};

export default CreateDiaryPage;

================
File: client/src/pages/DashboardLayout.jsx
================
import { createContext, useState, useContext, useEffect } from "react";
import { Outlet, useLoaderData, useNavigate, redirect } from "react-router-dom";
import { toast } from "react-toastify";
import customFetch from "../utils/customFetch";

import Navbar from "../components/Navbar";
import DiaryList from "../components/DiaryList";

export const loader = async () => {
  try {
    const [userResponse, diariesResponse] = await Promise.all([
      customFetch.get("/users/current-user"),
      customFetch.get("/diaries"),
    ]);
    return { user: userResponse.data, diaries: diariesResponse.data };
  } catch (error) {
    return redirect("/");
  }
};

const DashboardContext = createContext();

const DashboardLayout = () => {
  const { user, diaries: initialDiaries } = useLoaderData();
  const [diaries, setDiaries] = useState(initialDiaries.diaries);
  const navigate = useNavigate();

  const logout = async () => {
    navigate("/");
    await customFetch.get("/auth/logout");
    toast.success("Logged out successfully");
  };

  const fetchDiaries = async () => {
    try {
      const response = await customFetch.get("/diaries");
      setDiaries(response.data.diaries);
    } catch (error) {
      console.error("Error fetching diaries:", error);
    }
  };

  const addDiary = (newDiary) => {
    setDiaries((prevDiaries) => [...prevDiaries, newDiary]);
  };

  const deleteDiary = async (diaryId) => {
    try {
      await customFetch.delete(`/diaries/${diaryId}`);
      setDiaries((prevDiaries) =>
        prevDiaries.filter((diary) => diary._id !== diaryId)
      );
      toast.success("Diary deleted successfully");
      navigate("/dashboard");
    } catch (error) {
      console.error("Error deleting diary:", error);
      toast.error("Failed to delete diary");
    }
  };

  useEffect(() => {
    fetchDiaries();
  }, []);

  return (
    <DashboardContext.Provider
      value={{
        user,
        logout,
        diaries,
        fetchDiaries,
        addDiary,
        deleteDiary,
      }}
    >
      <div className="flex h-screen bg-gray-100">
        <div className="flex-1 flex flex-col overflow-hidden">
          <Navbar />
          <main className="flex-1 overflow-x-hidden overflow-y-auto bg-gray-200">
            <div className="container mx-auto px-6 py-8">
              <h3 className="text-gray-700 text-3xl font-medium">Dashboard</h3>
              <DiaryList />
              <Outlet context={{ user }} />
            </div>
          </main>
        </div>
      </div>
    </DashboardContext.Provider>
  );
};

export const useDashboardContext = () => useContext(DashboardContext);

export default DashboardLayout;

================
File: client/src/pages/DiaryDetailPage.jsx
================
import { useState } from "react";
import { Link, useLoaderData, useNavigate } from "react-router-dom";
import axios from "axios";

import {
  DiaryHeader,
  DiaryStats,
  ProfitLossChart,
  TradeForm,
  TradeTable,
} from "../components";

export const loader = async ({ params }) => {
  try {
    const { data } = await axios.get(`/api/v1/diaries/${params.id}`);
    return data;
  } catch (error) {
    throw new Error("Failed to fetch diary");
  }
};

const DiaryDetailPage = () => {
  const { diary } = useLoaderData();
  const [isActive, setIsActive] = useState(diary.isActive);
  const [error, setError] = useState(null);
  const [showAddTrade, setShowAddTrade] = useState(false);
  const [editingTrade, setEditingTrade] = useState(null);
  const [newTrade, setNewTrade] = useState({
    tradeType: "long",
    symbol: "",
    entryDate: "",
    entryPrice: "",
    quantity: "",
    exitDate: "",
    exitPrice: "",
    stopLoss: "",
    takeProfit: "",
    fees: "",
    notes: "",
  });
  const navigate = useNavigate();

  const handleIsActiveToggle = async () => {
    try {
      const { data } = await axios.patch(`/api/v1/diaries/${diary._id}`, {
        isActive: !isActive,
      });
      setIsActive(data.diary.isActive);
    } catch (err) {
      setError(err.message);
    }
  };

  const handleAddTrade = async (e) => {
    e.preventDefault();
    try {
      await axios.post(`/api/v1/diaries/${diary._id}/trades`, newTrade);
      setShowAddTrade(false);
      navigate(`/dashboard/diary/${diary._id}`);
    } catch (err) {
      setError(err.message);
    }
  };

  const handleEditTrade = (trade) => {
    setEditingTrade(trade);
    setNewTrade({
      ...trade,
      entryDate: trade.entryDate.split("T")[0],
      exitDate: trade.exitDate ? trade.exitDate.split("T")[0] : "",
    });
    setShowAddTrade(true);
  };

  const handleUpdateTrade = async (e) => {
    e.preventDefault();
    try {
      await axios.patch(
        `/api/v1/diaries/${diary._id}/trades/${editingTrade._id}`,
        newTrade
      );
      setShowAddTrade(false);
      setEditingTrade(null);
      navigate(`/dashboard/diary/${diary._id}`);
    } catch (err) {
      setError(err.message);
    }
  };

  const handleDeleteTrade = async (tradeId) => {
    if (window.confirm("Are you sure you want to delete this trade?")) {
      try {
        await axios.delete(`/api/v1/diaries/${diary._id}/trades/${tradeId}`);
        navigate(`/dashboard/diary/${diary._id}`);
      } catch (err) {
        setError(err.message);
      }
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewTrade((prev) => ({ ...prev, [name]: value }));
  };

  const profitLossData = diary.trades.map((trade) => ({
    date: new Date(trade.exitDate || trade.entryDate).toLocaleDateString(),
    profitLoss: trade.profitLoss || 0,
  }));

  const winRate =
    diary.trades.length > 0
      ? (
          (diary.trades.filter((trade) => (trade.profitLoss || 0) > 0).length /
            diary.trades.length) *
          100
        ).toFixed(2)
      : "0.00";

  if (error) return <div>Error: {error}</div>;

  return (
    <div className="container mx-auto p-4">
      <DiaryHeader
        name={diary.name}
        description={diary.description}
        isActive={isActive}
        onToggleActive={handleIsActiveToggle}
      />

      <DiaryStats
        totalTrades={diary.trades.length}
        totalProfitLoss={diary.totalProfitLoss}
        winRate={winRate}
      />

      <ProfitLossChart data={profitLossData} />

      <TradeTable
        trades={diary.trades}
        onEditTrade={handleEditTrade}
        onDeleteTrade={handleDeleteTrade}
      />

      <div className="mb-8">
        <button
          onClick={() => {
            setShowAddTrade(!showAddTrade);
            setEditingTrade(null);
            setNewTrade({
              tradeType: "long",
              symbol: "",
              entryDate: "",
              entryPrice: "",
              quantity: "",
              exitDate: "",
              exitPrice: "",
              stopLoss: "",
              takeProfit: "",
              fees: "",
              notes: "",
            });
          }}
          className="bg-blue-500 text-white px-4 py-2 rounded"
        >
          {showAddTrade ? "Cancel" : "Add New Trade"}
        </button>

        {showAddTrade && (
          <TradeForm
            trade={newTrade}
            onSubmit={editingTrade ? handleUpdateTrade : handleAddTrade}
            onChange={handleInputChange}
            isEditing={!!editingTrade}
          />
        )}
      </div>

      <div className="flex space-x-4">
        <Link
          to="/dashboard"
          className="bg-gray-300 text-black px-4 py-2 rounded"
        >
          Back to Dashboard
        </Link>
      </div>
    </div>
  );
};

export default DiaryDetailPage;

================
File: client/src/pages/Error.jsx
================
import { useNavigate } from "react-router-dom";

import img from "../assets/images/not-found.jpg";

const Error = () => {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col justify-center items-center px-4 sm:px-6 lg:px-8">
      <div className="max-w-2xl w-full space-y-12 text-center">
        <div className="space-y-6">
          <div className="w-96 h-96 mx-auto bg-gray-300 rounded-lg flex items-center justify-center text-gray-500 text-xl">
            <img src={img} alt="Not Found" />
          </div>

          <h1 className="mt-8 text-6xl font-extrabold text-gray-900">404</h1>

          <h2 className="mt-2 text-4xl font-bold text-gray-800">
            Oops! Page Not Found
          </h2>

          <p className="mt-4 text-xl text-gray-600">
            The page you're looking for doesn't exist or has been moved.
          </p>
        </div>

        <div className="mt-12 space-y-6">
          <button
            onClick={() => navigate("/")}
            className="w-full flex justify-center py-3 px-6 border border-transparent rounded-md shadow-sm text-xl font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out"
          >
            Go Back Home
          </button>

          <button
            onClick={() => navigate(-1)}
            className="w-full flex justify-center py-3 px-6 border border-gray-300 rounded-md shadow-sm text-xl font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out"
          >
            Go Back to Previous Page
          </button>
        </div>
      </div>
    </div>
  );
};

export default Error;

================
File: client/src/pages/HomeLayout.jsx
================
import { Outlet } from "react-router-dom";

function HomeLayout() {
  return (
    <>
      <Outlet />
    </>
  );
}

export default HomeLayout;

================
File: client/src/pages/Landing.jsx
================
import { Link } from "react-router-dom";
import { Logo } from "../components";

import img from "../assets/images/landing.jpg";

const Landing = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 to-indigo-200">
      <nav className="container mx-auto px-6 py-4">
        <div className="flex justify-between items-center">
          <Logo />
        </div>
      </nav>

      <main className="container mx-auto px-6 py-12">
        <div className="flex flex-col lg:flex-row items-center justify-between">
          <div className="lg:w-1/2 mb-12 lg:mb-0">
            <h1 className="text-4xl lg:text-5xl font-bold text-gray-900 mb-6">
              Master Your Trades with{" "}
              <span className="text-indigo-600">TradeDiary</span>
            </h1>
            <p className="text-xl text-gray-700 mb-8">
              Elevate your trading strategy with TradeDiary - your personal
              trading journal. Log trades, analyze patterns, and gain valuable
              insights to refine your approach and boost your performance.
            </p>
            <div>
              <Link
                to="/register"
                className="bg-indigo-600 text-white px-6 py-3 rounded-md hover:bg-indigo-700 transition duration-300 text-lg font-medium inline-block"
              >
                Start Your Trading Journal
              </Link>
            </div>
          </div>
          <div className="lg:w-1/2">
            <img
              src={img}
              alt="TradeDiary Dashboard"
              className="rounded-lg shadow-xl"
            />
          </div>
        </div>
      </main>

      <section className="bg-white py-16">
        <div className="container mx-auto px-6">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            Why Use TradeDiary?
          </h2>
          <div className="grid md:grid-cols-3 gap-8">
            <div className="bg-gray-100 p-6 rounded-lg">
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Comprehensive Trade Logging
              </h3>
              <p className="text-gray-700">
                Record every detail of your trades, including entry and exit
                points, position sizes, and your rationale. Keep your trading
                history organized and accessible.
              </p>
            </div>
            <div className="bg-gray-100 p-6 rounded-lg">
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Advanced Performance Analytics
              </h3>
              <p className="text-gray-700">
                Visualize your trading performance with intuitive charts and
                graphs. Track your win rate, average gains, and identify your
                most profitable strategies.
              </p>
            </div>
            <div className="bg-gray-100 p-6 rounded-lg">
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Strategy Refinement Insights
              </h3>
              <p className="text-gray-700">
                Gain deep insights into your trading patterns. Identify what
                works and what doesn't, helping you refine your strategies and
                improve your decision-making.
              </p>
            </div>
          </div>
        </div>
      </section>

      <section className="bg-indigo-100 py-16">
        <div className="container mx-auto px-6">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-8">
            Take Control of Your Trading Journey
          </h2>
          <p className="text-xl text-center text-gray-700 mb-12">
            Whether you're a day trader, swing trader, or long-term investor,
            TradeDiary adapts to your style. Start making data-driven decisions
            and watch your trading improve.
          </p>
          <div className="text-center">
            <Link
              to="/register"
              className="bg-indigo-600 text-white px-8 py-4 rounded-md hover:bg-indigo-700 transition duration-300 text-xl font-medium inline-block"
            >
              Begin Your TradeDiary Today
            </Link>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Landing;

================
File: client/src/pages/Login.jsx
================
import { Form, redirect, Link } from "react-router-dom";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import customFetch from "../utils/customFetch";
import { FormRow, Logo, SubmitBtn } from "../components";

export const action = async ({ request }) => {
  const formData = await request.formData();
  const data = Object.fromEntries(formData);
  try {
    await customFetch.post("/auth/login", data);
    toast.success("Login successful");
    return redirect("/dashboard");
  } catch (error) {
    toast.error(error?.response?.data?.msg || "Login failed");
    return error;
  }
};

const Login = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 to-indigo-200 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-10 rounded-xl shadow-md">
        <Form method="post" className="mt-8 space-y-6">
          <div className="text-center">
            <Logo />
            <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
              Login
            </h2>
          </div>
          <FormRow type="text" name="username" />
          <FormRow type="password" name="password" />
          <SubmitBtn />
          <div className="text-sm text-center">
            <p>
              Not a member yet?{" "}
              <Link
                to="/register"
                className="font-medium text-indigo-600 hover:text-indigo-500"
              >
                Register
              </Link>
            </p>
          </div>
        </Form>
      </div>
    </div>
  );
};

export default Login;

================
File: client/src/pages/Register.jsx
================
import { Form, redirect, Link } from "react-router-dom";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import customFetch from "../utils/customFetch";
import { FormRow, Logo, SubmitBtn } from "../components";

export const action = async ({ request }) => {
  const formData = await request.formData();
  const data = Object.fromEntries(formData);
  try {
    await customFetch.post("/auth/register", data);
    toast.success("Registration successful");
    return redirect("/login");
  } catch (error) {
    toast.error(error?.response?.data?.msg || "Registration failed");
    return error;
  }
};

const Register = () => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 to-indigo-200 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8 bg-white p-10 rounded-xl shadow-md">
        <Form method="post" className="mt-8 space-y-6">
          <div className="text-center">
            <Logo />
            <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
              Register
            </h2>
          </div>
          <FormRow type="text" name="username" />
          <FormRow type="password" name="password" />
          <SubmitBtn />
          <div className="text-sm text-center">
            <p>
              Already a member?{" "}
              <Link
                to="/login"
                className="font-medium text-indigo-600 hover:text-indigo-500"
              >
                Login
              </Link>
            </p>
          </div>
        </Form>
      </div>
    </div>
  );
};

export default Register;

================
File: client/src/pages/index.js
================
export { default as Error } from "./Error";
export { default as Login } from "./Login";
export { default as Landing } from "./Landing";
export { default as Register } from "./Register";
export { default as HomeLayout } from "./HomeLayout";
export { default as DashboardLayout } from "./DashboardLayout";
export { default as DiaryDetailPage } from "./DiaryDetailPage";
export { default as CreateDiaryPage } from "./CreateDiaryPage";

================
File: client/src/utils/authUtils.js
================
import { redirect } from "react-router-dom";
import customFetch from "./customFetch";

export const authCheckLoader = async () => {
  try {
    // Attempt to fetch the current user's data
    await customFetch.get("/users/current-user");
    // If successful, the user is logged in, so redirect to dashboard
    return redirect("/dashboard");
  } catch (error) {
    // If there's an error (e.g., 401 Unauthorized), the user is not logged in
    // So we return null to allow the login/register page to render
    return null;
  }
};

================
File: client/src/utils/customFetch.js
================
import axios from "axios";

const customFetch = axios.create({
  baseURL: "/api/v1",
});

export default customFetch;

================
File: client/tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: client/vite.config.js
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      "/api": {
        target: "http://localhost:5000/api",
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ""),
      },
    },
  },
});

================
File: controllers/authController.js
================
import { StatusCodes } from "http-status-codes";

import User from "../models/User.js";

import { createJWT } from "../utils/token.js";
import { hashPassword, comparePassword } from "../utils/password.js";

import { UnauthenticatedError } from "../errors/customErrors.js";

export const register = async (req, res) => {
  const hashedPassword = await hashPassword(req.body.password);
  req.body.password = hashedPassword;

  const user = await User.create(req.body);

  res.status(StatusCodes.CREATED).json({
    userId: user._id,
    username: user.username,
  });
};

export const login = async (req, res) => {
  const user = await User.findOne({ username: req.body.username });

  const isUserValid =
    user && (await comparePassword(req.body.password, user.password));
  if (!isUserValid) {
    throw new UnauthenticatedError("Invalid credentials");
  }

  const token = createJWT({ userId: user._id });

  const oneDay = 1 * 24 * 60 * 60 * 1000;
  res.cookie("token", token, {
    httpOnly: true,
    expires: new Date(Date.now() + oneDay),
    secure: process.env.NODE_ENV === "production",
  });

  res.status(StatusCodes.OK).json({ msg: "User logged in" });
};

export const logout = async (req, res) => {
  res.cookie("token", "logout", {
    httpOnly: true,
    expires: new Date(Date.now()),
  });

  res.status(StatusCodes.OK).json({ msg: "User logged out" });
};

================
File: controllers/diaryContorller.js
================
import { StatusCodes } from "http-status-codes";

import Diary from "../models/Diary.js";

export const createDiary = async (req, res) => {
  req.body.user = req.user.userId;
  const diary = await Diary.create(req.body);
  res.status(StatusCodes.CREATED).json({ diary });
};

export const getAllDiaries = async (req, res) => {
  const diaries = await Diary.find({ user: req.user.userId }).sort(
    "-createdAt"
  );
  res.status(StatusCodes.OK).json({ diaries, count: diaries.length });
};

export const getDiary = async (req, res) => {
  const diary = await req.document.populate("trades");
  res.status(StatusCodes.OK).json({ diary });
};

export const updateDiary = async (req, res) => {
  const diary = await Diary.findByIdAndUpdate(req.document._id, req.body, {
    new: true,
    runValidators: true,
  });
  res.status(StatusCodes.OK).json({ diary });
};

export const deleteDiary = async (req, res) => {
  await Diary.findByIdAndDelete(req.document._id);
  res.status(StatusCodes.NO_CONTENT).send();
};

================
File: controllers/tradeController.js
================
import { StatusCodes } from "http-status-codes";
import Trade from "../models/Trade.js";
import Diary from "../models/Diary.js";
import { BadRequestError, NotFoundError } from "../errors/customErrors.js";

export const createTrade = async (req, res) => {
  const { diaryId } = req.params;
  const {
    tradeType,
    symbol,
    entryDate,
    entryPrice,
    quantity,
    exitDate,
    exitPrice,
    stopLoss,
    takeProfit,
    fees,
    notes,
  } = req.body;

  // Check for all required fields
  if (
    !tradeType ||
    !symbol ||
    !entryDate ||
    !entryPrice ||
    !quantity ||
    !exitDate ||
    !exitPrice ||
    !stopLoss ||
    !takeProfit ||
    !fees
  ) {
    throw new BadRequestError("Please provide all required trade information");
  }

  const diary = await Diary.findOne({ _id: diaryId, user: req.user.userId });
  if (!diary) {
    throw new NotFoundError(`No diary with id ${diaryId}`);
  }

  const trade = await Trade.create({
    tradeType,
    symbol,
    entryDate,
    entryPrice,
    quantity,
    exitDate,
    exitPrice,
    stopLoss,
    takeProfit,
    fees,
    notes,
  });

  diary.trades.push(trade._id);
  await diary.save();

  res.status(StatusCodes.CREATED).json({ trade });
};

export const updateTrade = async (req, res) => {
  const { id: tradeId } = req.params;
  const {
    tradeType,
    symbol,
    entryDate,
    entryPrice,
    quantity,
    exitDate,
    exitPrice,
    stopLoss,
    takeProfit,
    fees,
    notes,
  } = req.body;

  // Check for all required fields
  if (
    !tradeType ||
    !symbol ||
    !entryDate ||
    !entryPrice ||
    !quantity ||
    !exitDate ||
    !exitPrice ||
    !stopLoss ||
    !takeProfit ||
    !fees
  ) {
    throw new BadRequestError("Please provide all required trade information");
  }

  const trade = await Trade.findById(tradeId);

  if (!trade) {
    throw new NotFoundError(`No trade with id ${tradeId}`);
  }

  // Update trade fields
  trade.tradeType = tradeType;
  trade.symbol = symbol;
  trade.entryDate = entryDate;
  trade.entryPrice = entryPrice;
  trade.quantity = quantity;
  trade.exitDate = exitDate;
  trade.exitPrice = exitPrice;
  trade.stopLoss = stopLoss;
  trade.takeProfit = takeProfit;
  trade.fees = fees;
  trade.notes = notes;

  // Save the updated trade
  await trade.save();

  res.status(StatusCodes.OK).json({ trade });
};

export const deleteTrade = async (req, res) => {
  const { id: tradeId, diaryId } = req.params;

  const trade = await Trade.findByIdAndDelete(tradeId);
  if (!trade) {
    throw new NotFoundError(`No trade with id ${tradeId}`);
  }

  await Diary.findByIdAndUpdate(diaryId, { $pull: { trades: tradeId } });

  res.status(StatusCodes.OK).json({ msg: "Trade deleted successfully" });
};

================
File: controllers/userController.js
================
import { StatusCodes } from "http-status-codes";

import User from "../models/User.js";

export const getCurrentUser = async (req, res) => {
  const user = await User.findById(req.user.userId).select("-password");

  res.status(StatusCodes.OK).json({ user });
};

================
File: errors/customErrors.js
================
import { StatusCodes } from "http-status-codes";

export class NotFoundError extends Error {
  constructor(message) {
    super(message);
    this.name = "NotFoundError";
    this.statusCode = StatusCodes.NOT_FOUND;
  }
}

export class BadRequestError extends Error {
  constructor(message) {
    super(message);
    this.name = "BadRequestError";
    this.statusCode = StatusCodes.BAD_REQUEST;
  }
}

export class UnauthenticatedError extends Error {
  constructor(message) {
    super(message);
    this.name = "UnauthenticatedError";
    this.statusCode = StatusCodes.UNAUTHORIZED;
  }
}

export class UnauthorizedError extends Error {
  constructor(message) {
    super(message);
    this.name = "UnauthorizedError";
    this.statusCode = StatusCodes.FORBIDDEN;
  }
}

================
File: middleware/auth.js
================
import { verifyJWT } from "../utils/token.js";

import { UnauthenticatedError } from "../errors/customErrors.js";

export const authenticateUser = async (req, res, next) => {
  const { token } = req.cookies;
  if (!token) {
    throw new UnauthenticatedError("Authentication invalid");
  }

  try {
    const { userId } = verifyJWT(token);
    req.user = { userId };
    next();
  } catch (error) {
    throw new UnauthenticatedError("Authentication invalid");
  }
};

================
File: middleware/errorHandler.js
================
import { StatusCodes } from "http-status-codes";

const errorHandler = (err, req, res, next) => {
  const statusCode = err.statusCode || StatusCodes.INTERNAL_SERVER_ERROR;
  const msg = err.message || "Something went wrong, try again later";

  res.status(statusCode).json({ msg });
};

export default errorHandler;

================
File: models/Diary.js
================
import mongoose from "mongoose";

const diarySchema = new mongoose.Schema(
  {
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    name: {
      type: String,
      required: true,
      trim: true,
    },
    description: {
      type: String,
      trim: true,
    },
    trades: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Trade",
      },
    ],
  },
  {
    timestamps: true,
    toJSON: { virtuals: true },
    toObject: { virtuals: true },
  }
);

diarySchema.virtual("totalProfitLoss").get(function () {
  return this.trades.reduce(
    (total, trade) => total + (trade.profitLoss || 0),
    0
  );
});

export default mongoose.model("Diary", diarySchema);

================
File: models/Trade.js
================
import mongoose from "mongoose";

const tradeSchema = new mongoose.Schema(
  {
    tradeType: {
      type: String,
      enum: ["long", "short"],
      required: true,
    },
    symbol: {
      type: String,
      required: true,
      uppercase: true,
      trim: true,
    },
    entryDate: {
      type: Date,
      required: true,
    },
    entryPrice: {
      type: Number,
      required: true,
    },
    quantity: {
      type: Number,
      required: true,
    },
    exitDate: {
      type: Date,
      require: true,
    },
    exitPrice: {
      type: Number,
      required: true,
    },
    stopLoss: {
      type: Number,
      required: true,
    },
    takeProfit: {
      type: Number,
      required: true,
    },
    fees: {
      type: Number,
      required: true,
    },
    notes: {
      type: String,
      trim: true,
    },
    profitLoss: {
      type: Number,
    },
  },
  {
    timestamps: true,
  }
);

tradeSchema.pre("save", function (next) {
  if (this.exitPrice && this.entryPrice && this.quantity) {
    if (this.tradeType === "long") {
      this.profitLoss =
        (this.exitPrice - this.entryPrice) * this.quantity - this.fees;
    } else {
      this.profitLoss =
        (this.entryPrice - this.exitPrice) * this.quantity - this.fees;
    }
  }
  next();
});

export default mongoose.model("Trade", tradeSchema);

================
File: models/User.js
================
import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
  username: String,
  password: String,
});

export default mongoose.model("User", userSchema);

================
File: package.json
================
{
  "name": "trading-journal",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "setup-project": "npm i && cd client && npm i",
    "server": "nodemon server",
    "client": "cd client && npm run dev",
    "dev": "concurrently --kill-others-on-fail \" npm run server\" \" npm run client\""
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-async-errors": "^3.1.1",
    "express-mongo-sanitize": "^2.2.0",
    "express-rate-limit": "^7.4.0",
    "express-validator": "^7.1.0",
    "helmet": "^7.1.0",
    "http-status-codes": "^2.3.0",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.5.1",
    "morgan": "^1.10.0",
    "xss-clean": "^0.1.4"
  },
  "devDependencies": {
    "nodemon": "^3.1.4"
  }
}

================
File: routes/authRouter.js
================
import { Router } from "express";

import { register, login, logout } from "../controllers/authController.js";

import {
  validateRegister,
  validateLogin,
} from "../validation/authValidation.js";

const router = Router();

router.post("/register", validateRegister, register);
router.post("/login", validateLogin, login);
router.get("/logout", logout);

export default router;

================
File: routes/diaryRouter.js
================
import express from "express";

import {
  createDiary,
  getAllDiaries,
  getDiary,
  updateDiary,
  deleteDiary,
} from "../controllers/diaryContorller.js";

import {
  validateCreateDiary,
  validateUpdateDiary,
  validateDiaryId,
} from "../validation/diaryValidation.js";

const router = express.Router();

router.route("/").post(validateCreateDiary, createDiary).get(getAllDiaries);

router
  .route("/:id")
  .get(validateDiaryId, getDiary)
  .patch(validateUpdateDiary, updateDiary)
  .delete(validateDiaryId, deleteDiary);

export default router;

================
File: routes/tradeRouter.js
================
import express from "express";
import {
  createTrade,
  updateTrade,
  deleteTrade,
} from "../controllers/tradeController.js";

const router = express.Router({ mergeParams: true });

router.route("/").post(createTrade);
router.route("/:id").patch(updateTrade).delete(deleteTrade);

export default router;

================
File: routes/userRouter.js
================
import { Router } from "express";

import { getCurrentUser } from "../controllers/userController.js";

const router = Router();

router.get("/current-user", getCurrentUser);

export default router;

================
File: server.js
================
import "express-async-errors";
import * as dotenv from "dotenv";
import morgan from "morgan";
import express from "express";
import mongoose from "mongoose";
import cookieParser from "cookie-parser";
import { StatusCodes } from "http-status-codes";
import helmet from "helmet";
import rateLimit from "express-rate-limit";
import mongoSanitize from "express-mongo-sanitize";
import xss from "xss-clean";
import cors from "cors";
import path from "path";
import { dirname } from "path";
import { fileURLToPath } from "url";

import authRouter from "./routes/authRouter.js";
import userRouter from "./routes/userRouter.js";
import tradeRouter from "./routes/tradeRouter.js";
import diaryRouter from "./routes/diaryRouter.js";

import errorHandler from "./middleware/errorHandler.js";
import { authenticateUser } from "./middleware/auth.js";

dotenv.config();

const app = express();

// Security middleware
app.use(helmet());
app.use(cors());
app.use(xss());
app.use(mongoSanitize());

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
});
app.use(limiter);

if (process.env.NODE_ENV === "production") {
  app.use(morgan("combined"));
} else if (process.env.NODE_ENV === "development") {
  app.use(morgan("dev"));
}

const __dirname = dirname(fileURLToPath(import.meta.url));
app.use(express.static(path.join(__dirname, "public")));

app.use(cookieParser());
app.use(express.json({ limit: "10kb" }));

// Set security headers
app.use((req, res, next) => {
  res.setHeader("X-XSS-Protection", "1; mode=block");
  res.setHeader("X-Frame-Options", "DENY");
  res.setHeader("X-Content-Type-Options", "nosniff");
  next();
});

app.use("/api/v1/auth", authRouter);
app.use("/api/v1/users", authenticateUser, userRouter);
app.use("/api/v1/diaries", authenticateUser, diaryRouter);

app.use(
  "/api/v1/diaries/:diaryId/trades",
  authenticateUser,
  (req, res, next) => {
    req.diaryId = req.params.diaryId;
    next();
  },
  tradeRouter
);

app.get("*", (req, res) => {
  res.sendFile(path.resolve(__dirname, "./public", "index.html"));
});

app.use("*", (req, res) => {
  res.status(StatusCodes.NOT_FOUND).json({
    success: false,
    error: "Page not found",
  });
});

app.use(errorHandler);

const port = process.env.PORT || 5000;
const start = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    app.listen(port, () => {
      console.log(`Server is running on port ${port}`);
    });
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
};

start();

================
File: utils/password.js
================
import bcrypt from "bcryptjs";

export async function hashPassword(password) {
  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(password, salt);

  return hashedPassword;
}

export async function comparePassword(password, hashedPassword) {
  const isMatch = await bcrypt.compare(password, hashedPassword);
  return isMatch;
}

================
File: utils/token.js
================
import jwt from "jsonwebtoken";

export const createJWT = (payload) => {
  const token = jwt.sign(payload, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN,
  });

  return token;
};

export const verifyJWT = (token) => {
  const decoded = jwt.verify(token, process.env.JWT_SECRET);

  return decoded;
};

================
File: validation/authValidation.js
================
import withValidationErrors from "./withValidationErrors.js";
import {
  isNonEmptyString,
  validateUsername,
  validatePassword,
} from "./commonValidations.js";

const validateRegister = withValidationErrors([
  isNonEmptyString("username"),
  validateUsername(),
  validatePassword(),
]);

const validateLogin = withValidationErrors([
  isNonEmptyString("username"),
  validatePassword(),
]);

export { validateRegister, validateLogin };

================
File: validation/commonValidations.js
================
import mongoose from "mongoose";
import { body, param } from "express-validator";

import User from "../models/User.js";

import {
  BadRequestError,
  NotFoundError,
  UnauthorizedError,
} from "../errors/customErrors.js";

const validateId = (model, idField = "id", userIdField = "user") =>
  param(idField).custom(async (id, { req }) => {
    if (!mongoose.Types.ObjectId.isValid(id)) {
      throw new BadRequestError(`Invalid ${model.modelName} id`);
    }
    const document = await model.findById(id);
    if (!document) {
      throw new NotFoundError(`No ${model.modelName} found with id ${id}`);
    }
    if (document[userIdField].toString() !== req.user.userId) {
      throw new UnauthorizedError(
        `Not authorized to access this ${model.modelName}`
      );
    }
    req.document = document;
  });

const isNonEmptyString = (field) =>
  body(field).isString().notEmpty().withMessage(`${field} is required`);

const validateUsername = () =>
  body("username")
    .notEmpty()
    .withMessage("username is required")
    .custom(async (username) => {
      const user = await User.findOne({ username });
      if (user) {
        throw new BadRequestError("username already exists");
      }
    });

const validateUniqueUsername = (field = "username") =>
  body(field)
    .notEmpty()
    .withMessage(`${field} is required`)
    .custom(async (username, { req }) => {
      const user = await User.findOne({ username });
      if (user && user._id.toString() !== req.user.userId) {
        throw new BadRequestError(`${field} already exists`);
      }
    });

const validatePassword = () =>
  body("password")
    .notEmpty()
    .withMessage("password is required")
    .isLength({ min: 8 })
    .withMessage("password must be at least 8 characters long");

const validateOptionalField = (field, values) =>
  body(field).optional().isIn(values).withMessage(`Invalid ${field}`);

export {
  validateId,
  isNonEmptyString,
  validateUsername,
  validateUniqueUsername,
  validatePassword,
  validateOptionalField,
};

================
File: validation/diaryValidation.js
================
import { body } from "express-validator";

import Diary from "../models/Diary.js";
import { validateId } from "./commonValidations.js";
import withValidationErrors from "./withValidationErrors.js";

export const validateCreateDiary = withValidationErrors([
  body("name")
    .notEmpty()
    .withMessage("Diary name is required")
    .isString()
    .withMessage("Diary name must be a string")
    .trim()
    .isLength({ min: 3, max: 50 })
    .withMessage("Diary name must be between 3 and 50 characters"),
  body("description")
    .optional()
    .isString()
    .withMessage("Description must be a string")
    .trim()
    .isLength({ max: 500 })
    .withMessage("Description cannot exceed 500 characters"),
]);

export const validateDiaryId = withValidationErrors([validateId(Diary)]);

export const validateUpdateDiary = withValidationErrors([
  ...validateCreateDiary,
  validateId(Diary),
]);

================
File: validation/withValidationErrors.js
================
import { validationResult } from "express-validator";

import {
  BadRequestError,
  NotFoundError,
  UnauthorizedError,
} from "../errors/customErrors.js";

const withValidationErrors = (validateValues) => {
  return [
    validateValues,
    (req, res, next) => {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        const errorMessages = errors.array().map((error) => error.msg);

        if (errorMessages[0].includes("not found")) {
          throw new NotFoundError(errorMessages);
        }

        if (errorMessages[0].includes("Unauthorized")) {
          throw new UnauthorizedError(errorMessages);
        }

        throw new BadRequestError(errorMessages);
      }
      next();
    },
  ];
};

export default withValidationErrors;
